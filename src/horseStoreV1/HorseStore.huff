// send calldata -> function dispatch -> function

/* interfaces */
#define function updateHorseNumber(uint256) nonpayable returns()
#define function readNumberOfHorses() view returns(uint256)

#define constant NUMBER_OF_HORSES_STORAGE_SLOT = FREE_STORAGE_POINTER()

#define macro MAIN() = takes(0) returns(0) {
    0x00 calldataload 0xe0 shr //[function_selector]
    //function selector for updateHorseNumber(uint256) function
    dup1 //[function_selector, function_selector]
    __FUNC_SIG(updateHorseNumber) //[0xcdfead2e, function_selector, function_selector]
    eq     //[true/false, function_selector]
    updateJump  //[updateJumpProgramCounter, true/false, function_selector]
    jumpi //[function_selector]
    //if the calldata does not match the first function selector we repeat the process for the next function selector
    __FUNC_SIG(readNumberOfHorses) //[0xe026c017, function_selector]
    eq //[true/false]
    readJump //[readJumpProgramCounter, true/false]
    jumpi //[]

    0x00 0x00 revert

    
    updateJump:
        SET_NUMBER_OF_HORSES()

    readJump:
        GET_NUMBER_OF_HORSES()

    
}
#define macro SET_NUMBER_OF_HORSES() = takes(0) returns(0){
    0x04 // [4]
    calldataload //[function parameters, function selector]
    [NUMBER_OF_HORSES_STORAGE_SLOT] //[0, function parameters, function selector]
    sstore //[function selector]    storage: [0: function paramter]
    stop
}
#define macro GET_NUMBER_OF_HORSES() = takes(0) returns(0){
    [NUMBER_OF_HORSES_STORAGE_SLOT] //[0]
    sload //[value] loads the value on stack from the storage
    0x00 //[0, value] location to where to store in memory //mstore takes index where to store and the value, top: index, below: value
    mstore //[] value is stored in memory
    0x20 // [32] size of the value to return
    0x00 // [0, 32] index to return
    return // [] takes index to return from memory on top and the size of the return value below
    

}